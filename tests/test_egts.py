import unittest
from egtsdebugger.egts import *

nav_packet = b"\x01\x00\x00\x0b\x00\x23\x00\x00\x00\x01\x99\x18\x00\x00\x00\x01\xef\x00\x00\x00\x02\x02\x10\x15\x00" \
             b"\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00\x00\x00\x00\x00\x6a\x8d"
auth_packet = b"\x01\x00\x00\x0b\x00\x0f\x00\x01\x00\x01\x06\x08\x00\x01\x00\x38\x01\x01\x05\x05\x00\x01\xef\x03\x00" \
              b"\x00\x56\x67"

packet_without_index = b"\x00\x00\x00\x0b\x00\x23\x00\x00\x00\x04\x99\x18\x00\x00\x00\x05\xef\x00\x00\x00\x02\x02\x10" \
                       b"\x15\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00\x00\x00\x00\x00" \
                       b"\x6a\x8d"
packet_short_header = b"\x01\x00\x00\x0b\x00"
packet_incorrect_prf = b"\x01\x00\x40\x0b\x00\x23\x00\x00\x00\x04\x99\x18\x00\x00\x00\x05\xef\x00\x00\x00\x02\x02\x10" \
                       b"\x15\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00\x00\x00\x00\x00" \
                       b"\x6a\x8d"
packet_incorrect_header_len = b"\x01\x00\x00\x0a\x00\x23\x00\x00\x00\x01\x99\x18\x00\x00\x00\x01\xef\x00\x00\x00\x02" \
                              b"\x02\x10\x15\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00" \
                              b"\x00\x00\x00\x00\x6a\x8d"
packet_incorrect_header_crc = b"\x01\x00\x00\x0b\x00\x23\x00\x00\x00\x01\x98\x18\x00\x00\x00\x01\xef\x00\x00\x00\x02" \
                              b"\x02\x10\x15\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00" \
                              b"\x00\x00\x00\x00\x6a\x8d"
packet_nill_body = b"\x01\x00\x00\x0b\x00\x00\x00\x00\x00\x01\x25\x18\x00\x00\x00\x01\xef\x00\x00\x00\x02\x02\x10\x15" \
                   b"\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00\x00\x00\x00\x00\x6a\x8d"
packet_short_body = b"\x01\x00\x00\x0b\x00\x23\x00\x00\x00\x01\x99\x18\x00\x00\x00\x01\xef\x00\x00\x00\x02"
packet_incorrect_body_crc = b"\x01\x00\x00\x0b\x00\x23\x00\x00\x00\x01\x99\x18\x00\x00\x00\x01\xef\x00\x00\x00\x02" \
                            b"\x02\x10\x15\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00" \
                            b"\x00\x00\x00\x00\x6a\x8e"
packet_unknown_packet_type = b"\x01\x00\x00\x0b\x00\x23\x00\x00\x00\x02\xCA\x18\x00\x00\x00\x01\xef\x00\x00\x00\x02" \
                             b"\x02\x10\x15\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00" \
                             b"\x00\x00\x00\x00\x6a\x8d"
packet_short_record = b"\x01\x00\x00\x0b\x00\x06\x00\x00\x00\x01\xAD\x18\x00\x00\x00\x00\x01\xf7\x09"
packet_short_record1 = b"\x01\x00\x00\x0b\x00\x08\x00\x00\x00\x01\x1B\x18\x00\x00\x00\x01\x01\x00\x01\xf5\x43"
packet_invalid_record_len = b"\x01\x00\x00\x0b\x00\x23\x00\x00\x00\x01\x99\x21\x00\x00\x00\x01\xef\x00\x00\x00\x02" \
                            b"\x02\x10\x15\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00" \
                            b"\x00\x00\x00\x00\x2e\xd7"
packet_short_subrecord_header = b"\x01\x00\x00\x0b\x00\x0d\x00\x00\x00\x01\xD7\x02\x00\x00\x00\x01\xef\x00\x00\x00" \
                                b"\x02\x02\x10\x15\xfd\x22"
packet_short_subrecord_data = b"\x01\x00\x00\x0b\x00\x23\x00\x00\x00\x01\x99\x18\x00\x00\x00\x01\xef\x00\x00\x00\x02" \
                              b"\x02\x10\x16\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00" \
                              b"\x00\x00\x00\x00\x77\x22"
packet_unknown_service = b"\x01\x00\x00\x0b\x00\x23\x00\x00\x00\x01\x99\x18\x00\x00\x00\x01\xef\x00\x00\x00\x03\x02" \
                         b"\x10\x15\x00\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00\x00\x00" \
                         b"\x00\x00\x0b\x21"
nav_packet2 = b"\x01\x00\x03\x0b\x00\x23\x00\x00\x00\x01\x42\x18\x00\x00\x00\x01\xef\x00\x00\x00\x02\x02\x10\x15\x00" \
             b"\xd2\x31\x2b\x10\x4f\xba\x3a\x9e\xd2\x27\xbc\x35\x03\x00\x00\xb2\x00\x00\x00\x00\x00\x6a\x8d"
long_packet = b'\x01\x00\x03\x0b\x00\xcf\r\x01\x00\x01&\x18\x00\x01\x00\x01\x01\x00\x00\x00\x02\x02\x10\x15\x00\xa7%\xb2\x12S\xd8\xa2\x9e\xa1\x93\xd35\x03\x00\x80\x02\x00\x00\x00\x00\x00\x18\x00\x02\x00\x01\x02\x00\x00\x00\x02\x02\x10\x15\x00\x10\'\xb2\x12\x97?~\x9eHB\xa25\x03\x00\x80a\x00\x00\x00\x00\x00\x18\x00\x03\x00\x01\x03\x00\x00\x00\x02\x02\x10\x15\x00R&\xb2\x12\xfdh\xc7\x9egX\xa45\x03\x00\x00\xed\x00\x00\x00\x00\x00\x18\x00\x04\x00\x01\x04\x00\x00\x00\x02\x02\x10\x15\x00\x97%\xb2\x12\xc3}\xe0\x9e\xb3\x86 5\x032\x00\xca\x00\x00\x00\x00\x00\x18\x00\x05\x00\x01\x05\x00\x00\x00\x02\x02\x10\x15\x00\xda$\xb2\x12\x1dQ\xbe\x9e\xfa\x89\x925\x03\x00\x00w\x00\x00\x00\x00\x00\x18\x00\x06\x00\x01\x06\x00\x00\x00\x02\x02\x10\x15\x00&&\xb2\x12\xd2t\x91\x9e\xf2r\xc25\x03\x00\x80\x14\x00\x00\x00\x00\x00\x18\x00\x07\x00\x01\x07\x00\x00\x00\x02\x02\x10\x15\x00\xbd%\xb2\x12\xe2\xc8~\x9e\xe3P\xa25\x03\x00\x80:\x00\x00\x00\x00\x00\x18\x00\x08\x00\x01\x08\x00\x00\x00\x02\x02\x10\x15\x00\xf0&\xb2\x12uJ\xbb\x9e\xf1\xe5\xc55\x03\x00\x00G\x00\x00\x00\x00\x00\x18\x00\t\x00\x01\t\x00\x00\x00\x02\x02\x10\x15\x00\x97&\xb2\x12\xb4\xb6M\x9e\xd1\xa2?5\x03\x00\x006\x00\x00\x00\x00\x00\x18\x00\n\x00\x01\n\x00\x00\x00\x02\x02\x10\x15\x00:&\xb2\x12\xfd8\xcb\x9e\xc8\x9bt5\x03\x00\x80H\x00\x00\x00\x00\x00\x18\x00\x0b\x00\x01\x0b\x00\x00\x00\x02\x02\x10\x15\x00\xab$\xb2\x12\xce\x83\xa7\x9d\xa8\x18\xb75\x03\x00\x00\x17\x00\x00\x00\x00\x00\x18\x00\x0c\x00\x01\x0c\x00\x00\x00\x02\x02\x10\x15\x00i&\xb2\x12P\xd4\x9a\x9e}\xef\xb95\x03\x00\x00\xc7\x00\x00\x00\x00\x00\x18\x00\r\x00\x01\r\x00\x00\x00\x02\x02\x10\x15\x00<&\xb2\x12\xd2\xc44\x9e\xc4\xe2|5\x03\x00\x00\x90\x00\x00\x00\x00\x00\x18\x00\x0e\x00\x01\x0e\x00\x00\x00\x02\x02\x10\x15\x00D\'\xb2\x12\x93\xbe\x7f\x9e\x05\xcb\xaf5\x03\xbe\x01@\x00\x00\x00\x00\x00\x18\x00\x0f\x00\x01\x0f\x00\x00\x00\x02\x02\x10\x15\x00\x1a&\xb2\x12\x10\x945\x9e:\r\xb25\x03\x00\x00\xac\x00\x00\x00\x00\x00\x18\x00\x10\x00\x01\x10\x00\x00\x00\x02\x02\x10\x15\x00\xf2&\xb2\x12\x1a\xed\xb4\x9e\x04\xfe\x8c5\x03\x00\x80\x05\x00\x00\x00\x00\x00\x18\x00\x11\x00\x01\x11\x00\x00\x00\x02\x02\x10\x15\x00\xad&\xb2\x12\x91\'\xe9\x9e\x18>H5\x03\x00\x80\x05\x00\x00\x00\x00\x00\x18\x00\x12\x00\x01\x12\x00\x00\x00\x02\x02\x10\x15\x00\x02%\xb2\x12\xdf\x84F\x9e7\xd4\x165\x03\x00\x00g\x00\x00\x00\x00\x00\x18\x00\x13\x00\x01\x13\x00\x00\x00\x02\x02\x10\x15\x00\x8a#\xb2\x12\xac4S\x9e\xab\x1f\xa05\x03\x00\x80`\x00\x00\x00\x00\x00\x18\x00\x14\x00\x01\x14\x00\x00\x00\x02\x02\x10\x15\x00\x90Ab\x11\x93r\xe4\x9e\xa4\x0bu5\x03\xa0\x01\xb4\x00\x00\x00\x00\x00\x18\x00\x15\x00\x01\x15\x00\x00\x00\x02\x02\x10\x15\x00\x04&\xb2\x12\x10\x81\x8c\x9ef\xde\xd05\x03\x00\x00A\x00\x00\x00\x00\x00\x18\x00\x16\x00\x01\x16\x00\x00\x00\x02\x02\x10\x15\x00\x04$\xb2\x12H2\xc7\x9e\x19\xa3\xce5\x03\x00\x80h\x00\x00\x00\x00\x00\x18\x00\x17\x00\x01\x17\x00\x00\x00\x02\x02\x10\x15\x00\x01$\xb2\x12\xf8\xbat\x9e\x98$O5\x03\x00\x00\xda\x00\x00\x00\x00\x00\x18\x00\x18\x00\x01\x18\x00\x00\x00\x02\x02\x10\x15\x00\xe7$\xb2\x12\xe6,\x89\x9e\xb1?d5\x03\x00\x00\x03\x00\x00\x00\x00\x00\x18\x00\x19\x00\x01\x19\x00\x00\x00\x02\x02\x10\x15\x00\xfb$\xb2\x120O\x9a\x9e\xe1\xb6\x985\x03\x00\x00\x1d\x00\x00\x00\x00\x00\x18\x00\x1a\x00\x01\x1a\x00\x00\x00\x02\x02\x10\x15\x00\xaf%\xb2\x12\xf0\x08s\x9e"\xcf\xe15\x03\x00\x007\x00\x00\x00\x00\x00\x18\x00\x1b\x00\x01\x1b\x00\x00\x00\x02\x02\x10\x15\x00\xac%\xb2\x12\x00\xbd\xa4\x9e\xf8\x85\xd45\x03\x00\x80\x02\x00\x00\x00\x00\x00\x18\x00\x1c\x00\x01\x1c\x00\x00\x00\x02\x02\x10\x15\x00\xf2$\xb2\x12k\x01\x81\x9e\x9fT\xb05\x03\x00\x80@\x00\x00\x00\x00\x00\x18\x00\x1d\x00\x01\x1d\x00\x00\x00\x02\x02\x10\x15\x00\x11$\xb2\x12\x04>\xb7\x9eXd\x8d5\x03\x00\x00\x0f\x00\x00\x00\x00\x00\x18\x00\x1e\x00\x01\x1e\x00\x00\x00\x02\x02\x10\x15\x00\xc3%\xb2\x122y\xc2\x9e\xbb\xee\x9c5\x03\x00\x00\xf0\x00\x00\x00\x00\x00\x18\x00\x1f\x00\x01\x1f\x00\x00\x00\x02\x02\x10\x15\x00\x9b%\xb2\x12\x14u\xe2\x9e\\\x82!5\x032\x00\xca\x00\x00\x00\x00\x00\x18\x00 \x00\x01 \x00\x00\x00\x02\x02\x10\x15\x00\xa1\'\xb2\x12\x02\xe7T\x9ej\x17\xec4\x03\x00\x00d\x00\x00\x00\x00\x00\x18\x00!\x00\x01!\x00\x00\x00\x02\x02\x10\x15\x00~%\xb2\x12\xc2\x00\xe2\x9e~\xa7B5\x03\x00\x00\xed\x00\x00\x00\x00\x00\x18\x00"\x00\x01"\x00\x00\x00\x02\x02\x10\x15\x00w%\xb2\x12\xe4e\x8e\x9e<B\xd55\x03\x00\x80H\x00\x00\x00\x00\x00\x18\x00#\x00\x01#\x00\x00\x00\x02\x02\x10\x15\x00\x1f(\xb2\x12\xb6P\xb7\x9e\x9f\xec\x8d5\x03\x00\x80]\x00\x00\x00\x00\x00\x18\x00$\x00\x01$\x00\x00\x00\x02\x02\x10\x15\x00\n&\xb2\x12\x0b\x89\xa2\x9e\x8a\xbf\x955\x03\x00\x00\x11\x00\x00\x00\x00\x00\x18\x00%\x00\x01%\x00\x00\x00\x02\x02\x10\x15\x00*%\xb2\x121\t\xb7\x9e\xdc\xd8\x8d5\x03\x00\x00\n\x00\x00\x00\x00\x00\x18\x00&\x00\x01&\x00\x00\x00\x02\x02\x10\x15\x00Q%\xb2\x12A\x1d\x93\x9e]\xba\xb75\x03\x00\x80Q\x00\x00\x00\x00\x00\x18\x00\'\x00\x01\'\x00\x00\x00\x02\x02\x10\x15\x00!&\xb2\x12\xc3MP\x9e_)A5\x03\x00\x00\x94\x00\x00\x00\x00\x00\x18\x00(\x00\x01(\x00\x00\x00\x02\x02\x10\x15\x00\x8a\'\xb2\x12g\x80\x80\x9e4p\xb15\x03\x00\x00\x93\x00\x00\x00\x00\x00\x18\x00)\x00\x01)\x00\x00\x00\x02\x02\x10\x15\x00|%\xb2\x12\xb1\x02\xfb\x9e\xec\xff\xa64\x03\x00\x80K\x00\x00\x00\x00\x00\x18\x00*\x00\x01*\x00\x00\x00\x02\x02\x10\x15\x00+&\xb2\x12\xe9\x13\x94\x9e}\xc2\xc35\x03\x00\x80\x14\x00\x00\x00\x00\x00\x18\x00+\x00\x01+\x00\x00\x00\x02\x02\x10\x15\x00A&\xb2\x12\x10\xf46\x9ec\xfa}5\x03\x00\x00\x90\x00\x00\x00\x00\x00\x18\x00,\x00\x01,\x00\x00\x00\x02\x02\x10\x15\x00\x13\'\xb2\x12Y\xb6P\x9e=\\A5\x03\x00\x00\x96\x00\x00\x00\x00\x00\x18\x00-\x00\x01-\x00\x00\x00\x02\x02\x10\x15\x00m&\xb2\x12z;\x9d\x9e\x12#\xbb5\x03\x00\x00\xc7\x00\x00\x00\x00\x00\x18\x00.\x00\x01.\x00\x00\x00\x02\x02\x10\x15\x00\x84$\xb2\x12\xec\x9a\xb6\x9e\xf8\xba\xb25\x03\x00\x00\xbd\x00\x00\x00\x00\x00\x18\x00/\x00\x01/\x00\x00\x00\x02\x02\x10\x15\x00\xc2%\xb2\x12\x8a\xb2\x81\x9e\xb6\xc5\xa35\x03\x00\x80:\x00\x00\x00\x00\x00\x18\x000\x00\x010\x00\x00\x00\x02\x02\x10\x15\x00H\'\xb2\x12a8\x82\x9e\xec\x07\xb15\x03\xbe\x01@\x00\x00\x00\x00\x00\x18\x001\x00\x011\x00\x00\x00\x02\x02\x10\x15\x00>&\xb2\x12\x00\x10\xce\x9eJ\x07v5\x03\x00\x80H\x00\x00\x00\x00\x00\x18\x002\x00\x012\x00\x00\x00\x02\x02\x10\x15\x00\x14\'\xb2\x12`\xbe\x81\x9e\xad\x01\xa45\x03\x00\x80a\x00\x00\x00\x00\x00\x18\x003\x00\x013\x00\x00\x00\x02\x02\x10\x15\x00\xb3%\xb2\x12\xf8\xdat\x9e\'\xb8\xe25\x03\x00\x007\x00\x00\x00\x00\x00\x18\x004\x00\x014\x00\x00\x00\x02\x02\x10\x15\x00\xec$\xb2\x12\xdc6\x8b\x9e\xacDe5\x03\x00\x00\x03\x00\x00\x00\x00\x00\x18\x005\x00\x015\x00\x00\x00\x02\x02\x10\x15\x00\n$\xb2\x12*t\xc9\x9e\n\xc4\xcf5\x03\x00\x80h\x00\x00\x00\x00\x00\x18\x006\x00\x016\x00\x00\x00\x02\x02\x10\x15\x00\xdc&\xb2\x12\xf6C\x95\x9e\\\x1d\x945\x03\x00\x00\n\x00\x00\x00\x00\x00\x18\x007\x00\x017\x00\x00\x00\x02\x02\x10\x15\x00\xb0%\xb2\x12\xf5\xc6\xa6\x9e\xf2\x8a\xd55\x03\x00\x80\x02\x00\x00\x00\x00\x00\x18\x008\x00\x018\x00\x00\x00\x02\x02\x10\x15\x00V&\xb2\x12\xfaD\xcb\x9efF\xa65\x03\x00\x00\xed\x00\x00\x00\x00\x00\x18\x009\x00\x019\x00\x00\x00\x02\x02\x10\x15\x00\xb2&\xb2\x129\x11\xec\x9e\xeb\xb2I5\x03\x00\x80\x05\x00\x00\x00\x00\x00\x18\x00:\x00\x01:\x00\x00\x00\x02\x02\x10\x15\x00\x9f%\xb2\x12el\xe4\x9e\x04~"5\x032\x00\xca\x00\x00\x00\x00\x00\x18\x00;\x00\x01;\x00\x00\x00\x02\x02\x10\x15\x00\xf5&\xb2\x12+\x01\xbf\x9eK\xc1\xc75\x03\x00\x00G\x00\x00\x00\x00\x00\x18\x00<\x00\x01<\x00\x00\x00\x02\x02\x10\x15\x00L%\xb2\x12o\xe8\x81\x9eT;\xb25\x03\x00\x00J\x00\x00\x00\x00\x00\x18\x00=\x00\x01=\x00\x00\x00\x02\x02\x10\x15\x00\t&\xb2\x12\xb7j\x8f\x9e:S\xd25\x03\x00\x00A\x00\x00\x00\x00\x00\x18\x00>\x00\x01>\x00\x00\x00\x02\x02\x10\x15\x00\xa5\'\xb2\x12@\x16W\x9e\t/\xed4\x03\x00\x00d\x00\x00\x00\x00\x00\x18\x00?\x00\x01?\x00\x00\x00\x02\x02\x10\x15\x00\x00%\xb2\x12\x8f\x13\x9d\x9e\x11\x19\x9a5\x03\x00\x00\x1d\x00\x00\x00\x00\x00\x18\x00@\x00\x01@\x00\x00\x00\x02\x02\x10\x15\x00\x8e#\xb2\x12\x88{V\x9e\x19\xc3\xa15\x03\x00\x80`\x00\x00\x00\x00\x00\x18\x00A\x00\x01A\x00\x00\x00\x02\x02\x10\x15\x00\x1f&\xb2\x12!89\x9eC\xdf\xb35\x03\x00\x00\xac\x00\x00\x00\x00\x00\x18\x00B\x00\x01B\x00\x00\x00\x02\x02\x10\x15\x00|%\xb2\x12j\xba\x90\x9e\x7fl\xd65\x03\x00\x80H\x00\x00\x00\x00\x00\x18\x00C\x00\x01C\x00\x00\x00\x02\x02\x10\x15\x00G&\xb2\x12t\xb38\x9e\x15\xda~5\x03\x00\x00\x90\x00\x00\x00\x00\x00\x18\x00D\x00\x01D\x00\x00\x00\x02\x02\x10\x15\x00\xf7$\xb2\x12\x13\xeb\x83\x9er\xc9\xb15\x03\x00\x80@\x00\x00\x00\x00\x00\x18\x00E\x00\x01E\x00\x00\x00\x02\x02\x10\x15\x00\x06%\xb2\x12\x95;J\x9e\x91\xaf\x185\x03\x00\x00g\x00\x00\x00\x00\x00\x18\x00F\x00\x01F\x00\x00\x00\x02\x02\x10\x15\x00&&\xb2\x12\xa5\x8fR\x9ePJB5\x03\x00\x00\x94\x00\x00\x00\x00\x00\x18\x00G\x00\x01G\x00\x00\x00\x02\x02\x10\x15\x00\x06$\xb2\x12\xc19x\x9e\xfd\xe3P5\x03\x00\x00\xda\x00\x00\x00\x00\x00\x18\x00H\x00\x01H\x00\x00\x00\x02\x02\x10\x15\x00\xc8%\xb2\x12!\x88\xc5\x9e3v\x9e5\x03\x00\x00\xf0\x00\x00\x00\x00\x00\x18\x00I\x00\x01I\x00\x00\x00\x02\x02\x10\x15\x00\x83%\xb2\x12j\xea\xe4\x9eR\x1cD5\x03\x00\x00\xed\x00\x00\x00\x00\x00\x18\x00J\x00\x01J\x00\x00\x00\x02\x02\x10\x15\x00\x80%\xb2\x12\xdbi\xfd\x9e\x813\xa84\x03\x00\x80K\x00\x00\x00\x00\x00\x18\x00K\x00\x01K\x00\x00\x00\x02\x02\x10\x15\x00\xf5$\xb2\x12\x9c\xe3\x8c\x9e\x0c\x1bf5\x03\x00\x00\x03\x00\x00\x00\x00\x00\x18\x00L\x00\x01L\x00\x00\x00\x02\x02\x10\x15\x00\xe0$\xb2\x12\xa6|\xc3\x9e\xbf\x1f\x955\x03\x00\x00w\x00\x00\x00\x00\x00\x18\x00M\x00\x01M\x00\x00\x00\x02\x02\x10\x15\x00\xf7&\xb2\x129^\xb9\x9e\x946\x8f5\x03\x00\x80\x05\x00\x00\x00\x00\x00\x18\x00N\x00\x01N\x00\x00\x00\x02\x02\x10\x15\x00\x8e\'\xb2\x12\xc6D\x83\x9ec\xd2\xb25\x03\x00\x00\x93\x00\x00\x00\x00\x00\x18\x00O\x00\x01O\x00\x00\x00\x02\x02\x10\x15\x00S%\xb2\x12\x8d\x19\x96\x9e\x828\xb95\x03\x00\x80Q\x00\x00\x00\x00\x00\x18\x00P\x00\x01P\x00\x00\x00\x02\x02\x10\x15\x00\x15$\xb2\x12\xba\xf4\xba\x9e\xb2?\x8f5\x03\x00\x00\x0f\x00\x00\x00\x00\x00\x18\x00Q\x00\x01Q\x00\x00\x00\x02\x02\x10\x15\x00\xa4%\xb2\x12%\x19\xe6\x9eeT#5\x032\x00\xca\x00\x00\x00\x00\x00\x18\x00R\x00\x01R\x00\x00\x00\x02\x02\x10\x15\x00\x88%\xb2\x12\xa7\xa98\x9e\x1e\xb4-5\x03\x8e\x84&\x00\x00\x00\x00\x00\x18\x00S\x00\x01S\x00\x00\x00\x02\x02\x10\x15\x00\x9b&\xb2\x12)\x1aS\x9e\x8cTB5\x03\x00\x006\x00\x00\x00\x00\x00\x18\x00T\x00\x01T\x00\x00\x00\x02\x02\x10\x15\x00#(\xb2\x12#\xe2\xba\x9eV\xb5\x8f5\x03\x00\x80]\x00\x00\x00\x00\x00\x18\x00U\x00\x01U\x00\x00\x00\x02\x02\x10\x15\x00\r&\xb2\x12\x1c*\x91\x9e\xec2\xd35\x03\x00\x00A\x00\x00\x00\x00\x00\x18\x00V\x00\x01V\x00\x00\x00\x02\x02\x10\x15\x00C&\xb2\x12\xbb\xc1\xd0\x9e\'`w5\x03\x00\x80H\x00\x00\x00\x00\x00\x18\x00W\x00\x01W\x00\x00\x00\x02\x02\x10\x15\x00\xaa\'\xb2\x12H\xe8X\x9e\r\x18\xee4\x03\x00\x00d\x00\x00\x00\x00\x00\x18\x00X\x00\x01X\x00\x00\x00\x02\x02\x10\x15\x00L\'\xb2\x12\x08"\x85\x9e\xc0|\xb25\x03\xbe\x01@\x00\x00\x00\x00\x00\x18\x00Y\x00\x01Y\x00\x00\x00\x02\x02\x10\x15\x00\x0e&\xb2\x12\te\xa6\x9e\x89\xad\x975\x03\x00\x00\x11\x00\x00\x00\x00\x00\x18\x00Z\x00\x01Z\x00\x00\x00\x02\x02\x10\x15\x00\xd4&\xb2\x12\x08H\xba\x9eo\xa5\x8f5\x03\x00\x00\xbe\x00\x00\x00\x00\x00\x18\x00[\x00\x01[\x00\x00\x00\x02\x02\x10\x15\x00\x80%\xb2\x12s\x8c\x92\x9e\x83U\xd75\x03\x00\x80H\x00\x00\x00\x00\x00\x18\x00\\\x00\x01\\\x00\x00\x00\x02\x02\x10\x15\x00\x87$\xb2\x12l\xf4\xb9\x9e\xb9g\xb45\x03\x00\x00\xbd\x00\x00\x00\x00\x00\x18\x00]\x00\x01]\x00\x00\x00\x02\x02\x10\x15\x00/&\xb2\x12\x9e\xca\x97\x9e\xd8\x9d\xc55\x03\x00\x80\x14\x00\x00\x00\x00\x00\x18\x00^\x00\x01^\x00\x00\x00\x02\x02\x10\x15\x00\xba&\xb2\x12\xf3\xc2\xee\x9e\xc9\x0bK5\x03\x00\x80\x05\x00\x00\x00\x00\x00\x18\x00_\x00\x01_\x00\x00\x00\x02\x02\x10\x15\x00\xb8%\xb2\x121\x0fx\x9eCR\xe45\x03\x00\x007\x00\x00\x00\x00\x00\x18\x00`\x00\x01`\x00\x00\x00\x02\x02\x10\x15\x00\x18\'\xb2\x12\xe1\x17\x85\x9em\xae\xa55\x03\x00\x80a\x00\x00\x00\x00\x00\x18\x00a\x00\x01a\x00\x00\x00\x02\x02\x10\x15\x00q&\xb2\x12\xd4\x04\xa1\x9e\xbf\x07\xbd5\x03\x00\x00\xc7\x00\x00\x00\x00\x00\x18\x00b\x00\x01b\x00\x00\x00\x02\x02\x10\x15\x00\x92#\xb2\x12V\xf5X\x9e\x00\x00\xa35\x03\x00\x80`\x00\x00\x00\x00\x00\x18\x00c\x00\x01c\x00\x00\x00\x02\x02\x10\x15\x00\x94Ab\x11\x99 \xea\x9e\xf9\xebw5\x03<\x00\x9f\x00\x00\x00\x00\x00\x18\x00d\x00\x01d\x00\x00\x00\x02\x02\x10\x15\x00\x0b%\xb2\x12w}L\x9e\x82\xd0\x195\x03\x00\x00g\x00\x00\x00\x00\x00\x18\x00e\x00\x01e\x00\x00\x00\x02\x02\x10\x15\x00\x0e$\xb2\x12\xf3\xf2\xcc\x9en\x83\xd15\x03\x00\x80h\x00\x00\x00\x00\x00\xec\xfb'


reply_packet = bytes([1, 0, 3, 11, 0, 16, 0, 9, 0, 0, 167, 9, 0, 0, 6, 0, 9, 0, 24, 2, 2, 0, 3, 0, 9, 0, 0, 0, 195])
nav_packet1 = bytes(
    [1, 0, 0, 11, 0, 35, 0, 16, 0, 1, 61, 24, 0, 16, 0, 1, 96, 34, 1, 0, 2, 2, 16, 21, 0, 96, 250, 82, 17, 68, 117, 177,
     158, 200, 196, 154, 53, 2, 0, 0, 85, 0, 0, 0, 0, 0, 78, 229])
reply_packet1 = bytes(
    [1, 0, 3, 11, 0, 16, 0, 16, 0, 0, 23, 16, 0, 0, 6, 0, 16, 0, 24, 2, 2, 0, 3, 0, 16, 0, 0, 163, 171])


class TestEgts(unittest.TestCase):
    """Tests for Egts class"""

    def test_nav_packet(self):
        egts = Egts(nav_packet)
        self.assertEqual(egts.pid, 0)
        self.assertEqual(egts.packet_type, EGTS_PT_APPDATA)
        [record] = egts.records
        self.assertEqual(record.rid, 0)
        self.assertEqual(record.sst, EGTS_TELEDATA_SERVICE)
        self.assertEqual(record.id, 239)
        [subrecord] = record.subrecords
        self.assertEqual(subrecord.type, EGTS_SR_POS_DATA)
        self.assertTrue(subrecord.vld)
        self.assertEqual(subrecord.ntm, 1533570258000)
        self.assertEqual(subrecord.lat, 55.62752532903746)
        self.assertEqual(subrecord.long, 37.782409656276556)
        self.assertEqual(subrecord.speed, 0)
        self.assertEqual(subrecord.dir, 178)
        self.assertEqual(subrecord.busy, 0)
        self.assertEqual(subrecord.src, 0)

    def test_without_index(self):
        with self.assertRaises(EgtsPcUnsProtocol) as error:
            Egts(packet_without_index)
        self.assertEqual(str(error.exception), "Unsupported protocol version (PRV not found)")
        self.assertEqual(error.exception.error_code, EGTS_PC_UNS_PROTOCOL)

    def test_short_header(self):
        with self.assertRaises(EgtsPcInvdatalen) as error:
            Egts(packet_short_header)
        self.assertEqual(str(error.exception), "Incorrect data length (Transport layer)")
        self.assertEqual(error.exception.error_code, EGTS_PC_INVDATALEN)

    def test_incorrect_prf(self):
        with self.assertRaises(EgtsPcUnsProtocol) as error:
            Egts(packet_incorrect_prf)
        self.assertEqual(str(error.exception), "Unsupported protocol version (PRF != 0)")
        self.assertEqual(error.exception.error_code, EGTS_PC_UNS_PROTOCOL)

    def test_incorrect_header_length(self):
        with self.assertRaises(EgtsPcIncHeaderForm) as error:
            Egts(packet_incorrect_header_len)
        self.assertEqual(str(error.exception), "Header structure error (Transport layer)")
        self.assertEqual(error.exception.error_code, EGTS_PC_INC_HEADERFORM)

    def test_incorrect_header_crc(self):
        with self.assertRaises(EgtsPcHeadercrcError) as error:
            Egts(packet_incorrect_header_crc)
        self.assertEqual(str(error.exception), "Header check sum error (Calculated crc: 153, crc in packet: 152)")
        self.assertEqual(error.exception.error_code, EGTS_PC_HEADERCRC_ERROR)

    def test_nill_body(self):
        with self.assertRaises(EgtsParsingError) as error:
            Egts(packet_nill_body)
        self.assertEqual(str(error.exception), "Packet is correct, but body length = 0")
        self.assertEqual(error.exception.error_code, -1)

    def test_short_body(self):
        with self.assertRaises(EgtsPcInvdatalen) as error:
            Egts(packet_short_body)
        self.assertEqual(str(error.exception), "Incorrect data length (Body buffer length is 10; Must be at least 37)")
        self.assertEqual(error.exception.error_code, EGTS_PC_INVDATALEN)

    def test_incorrect_body_crc(self):
        with self.assertRaises(EgtsPcDatacrcError) as error:
            Egts(packet_incorrect_body_crc)
        self.assertEqual(str(error.exception), "Data check sum error (Calculated crc: 36202, crc in packet: 36458)")
        self.assertEqual(error.exception.error_code, EGTS_PC_DATACRC_ERROR)

    def test_unknown_packet_type(self):
        with self.assertRaises(EgtsPcUnsType) as error:
            Egts(packet_unknown_packet_type)
        self.assertEqual(str(error.exception), "Unsupported type (Packet Type 2 is unknown)")
        self.assertEqual(error.exception.error_code, EGTS_PC_UNS_TYPE)

    def test_short_record(self):
        with self.assertRaises(EgtsPcIncHeaderForm) as error:
            Egts(packet_short_record)
        self.assertEqual(str(error.exception),
                         "Header structure error (Record is shorter then EGTS_SERVICE_LAYER_MIN_RECORD_HEADER_LEN)")
        self.assertEqual(error.exception.error_code, EGTS_PC_INC_HEADERFORM)

    def test_short_record1(self):
        with self.assertRaises(EgtsPcIncHeaderForm) as error:
            Egts(packet_short_record1)
        self.assertEqual(str(error.exception),
                         "Header structure error (Record is shorter then EGTS_SERVICE_LAYER_MIN_RECORD_HEADER_LEN + "
                         "opt_len)")
        self.assertEqual(error.exception.error_code, EGTS_PC_INC_HEADERFORM)

    def test_invalid_data_len(self):
        with self.assertRaises(EgtsPcInvdatalen) as error:
            Egts(packet_invalid_record_len)
        self.assertEqual(str(error.exception), "Incorrect data length (Record)")
        self.assertEqual(error.exception.error_code, EGTS_PC_INVDATALEN)

    def test_short_subrecord_header(self):
        with self.assertRaises(EgtsPcInvdatalen) as error:
            Egts(packet_short_subrecord_header)
        self.assertEqual(str(error.exception), "Incorrect data length (Subrecord header)")
        self.assertEqual(error.exception.error_code, EGTS_PC_INVDATALEN)

    def test_short_subrecord_data(self):
        with self.assertRaises(EgtsPcInvdatalen) as error:
            Egts(packet_short_subrecord_data)
        self.assertEqual(str(error.exception), "Incorrect data length (Subrecord data)")
        self.assertEqual(error.exception.error_code, EGTS_PC_INVDATALEN)

    def test_unknown_service(self):
        with self.assertRaises(EgtsPcSrvcUnkn) as error:
            Egts(packet_unknown_service)
        self.assertEqual(str(error.exception), "Unknown service (sst = 3; srt = 16)")
        self.assertEqual(error.exception.error_code, EGTS_PC_SRVC_UNKN)

    def test_auth_packet(self):
        egts = Egts(auth_packet)
        self.assertEqual(egts.packet_type, EGTS_PT_APPDATA)
        [record] = egts.records
        self.assertEqual(record.rid, 1)
        self.assertEqual(record.sst, EGTS_AUTH_SERVICE)
        [subrecord] = record.subrecords
        self.assertEqual(subrecord.type, EGTS_SR_DISPATCHER_IDENTITY)
        self.assertEqual(subrecord.dt, 1)
        self.assertEqual(subrecord.did, 1007)

    def test_response_packet(self):
        egts = Egts(reply_packet)
        self.assertEqual(egts.packet_type, EGTS_PT_RESPONSE)
        self.assertEqual(egts.rpid, 9)
        self.assertEqual(egts.pr, EGTS_PC_OK)
        [record] = egts.records
        self.assertEqual(record.rid, 9)
        self.assertEqual(record.sst, EGTS_TELEDATA_SERVICE)
        [subrecord] = record.subrecords
        self.assertEqual(subrecord.type, EGTS_PT_RESPONSE)
        self.assertEqual(subrecord.crn, 9)
        self.assertEqual(subrecord.rst, EGTS_PC_OK)

    def test_reply_and_parse_reply(self):
        egts = Egts(nav_packet)
        pid = egts.pid
        self.assertEqual(egts.packet_type, EGTS_PT_APPDATA)
        [record] = egts.records
        rec_num = record.rid
        service = record.sst
        ans_pid, ans_rid = 15, 47
        reply = egts.reply(ans_pid, ans_rid)
        egts_reply = Egts(reply)
        self.assertEqual(egts_reply.packet_type, EGTS_PT_RESPONSE)
        self.assertEqual(egts_reply.rpid, pid)
        self.assertEqual(egts_reply.pr, EGTS_PC_OK)
        [reply_record] = egts_reply.records
        self.assertEqual(reply_record.rid, ans_rid)
        self.assertEqual(reply_record.sst, service)
        [reply_subrecord] = reply_record.subrecords
        self.assertEqual(reply_subrecord.type, EGTS_PT_RESPONSE)
        self.assertEqual(reply_subrecord.crn, rec_num)
        self.assertEqual(reply_subrecord.rst, EGTS_PC_OK)

    def test_reply_nav(self):
        egts = Egts(nav_packet1)
        [record] = egts.records
        reply = egts.reply(egts.pid, record.rid)
        self.assertEqual(reply, reply_packet1)

    def test_form_bin(self):
        print(nav_packet2)
        egts = Egts(nav_packet2)
        print(egts)
        bin_packet = Egts.form_bin(0, egts.records)
        print(bin_packet)
        self.assertEqual(bin_packet, nav_packet2)

    # def test_long_packet(self):
    #     egts = Egts(long_packet)
    #     print(egts)
    #     print("len of records:", len(egts.records))


if __name__ == '__main__':
    unittest.main()
